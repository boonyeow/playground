import React, { useEffect, useRef } from "react";
import { Button, Input } from "@chakra-ui/react";
import cfg from "../util/config";
import { fetchContractContent } from "../util/fetchContractContent";
import IconService from "icon-sdk-js";

const {
    IconConverter,
    IconBuilder,
    HttpProvider,
    SignedTransaction,
    IconWallet,
} = IconService;

const httpProvider = new HttpProvider(cfg.NODE_URL);
const iconService = new IconService(httpProvider);
const Test = () => {
    const inputCX = useRef(null);
    const inputScore = useRef(null);

    const wallet = "";
    useEffect(() => {
        wallet = IconWallet.loadPrivateKey(cfg.PRIVATE_KEY);
    }, []);

    const fileUploadEvent = async (e) => {
        console.log(e);
    };

    async function deployContract() {
        // const contractContent = await fetchContractContent(
        //     "https://siasky.net/CACHSYOEvx3Xe6U9JIcEtVU5qEy3ICIi_f1zMsFEdsOxtA"
        // );
        const contractContent =
            "";

        // Estimate required step - create transaction without step limit
        // https://icondev.io/getting-started/how-to-write-a-smart-contract/how-to-estimate-required-step
        const httpProvider_debug = new HttpProvider(cfg.DEBUG_URL);
        const iconService_debug = new IconService(httpProvider_debug);
        const txObj = new IconService.IconBuilder.DeployTransactionBuilder()
            .nid(cfg.NID)
            .from(wallet.address)
            .to("cx489abf1ffc9d80e6fcc45e600d49255d3195dd41") //use the same address to update contract else, use cfg.SCORE_INSTALL_ADDRESS
            //.to(cfg.SCORE_INSTALL_ADDRESS)
            .version(IconConverter.toBigNumber(3))
            .timestamp(Date.now() * 1000)
            .contentType("application/java")
            .content(contractContent)
            .params({})
            .nonce(IconConverter.toBigNumber(1))
            .build();

        const estimatedSteps = IconConverter.toBigNumber(
            await iconService_debug.estimateStep(txObj).execute()
        );

        const margin = IconConverter.toBigNumber(10000);

        // Add step limit property to transaction
        txObj.stepLimit = IconService.IconConverter.toHex(
            estimatedSteps.plus(margin)
        );

        // Make signed transaction
        const signedTransaction = new SignedTransaction(txObj, wallet);
        const txHash = await iconService
            .sendTransaction(signedTransaction)
            .execute();
        console.log("txhash", txHash);
        setTimeout(async () => {
            const txObject = await iconService
                .getTransactionResult(txHash)
                .execute();
            console.log(txObject);
        }, 5000);

        return;
    }

    return (
        <>
            <Input ref={inputCX} placeholder="cx addy"></Input>
            <Input
                type="file"
                ref={inputScore}
                onChange={fileUploadEvent}
            ></Input>
            <Button onClick={deployContract}>Deploy</Button>
        </>
    );
};

export default Test;
