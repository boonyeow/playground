import React, { useEffect, useRef } from "react";
import { Button, Input } from "@chakra-ui/react";
import cfg from "../util/config";
import fetchContractContent from "../util/fetchContractContent";
import IconService from "icon-sdk-js";

const {
    IconConverter,
    IconBuilder,
    HttpProvider,
    SignedTransaction,
    IconWallet,
} = IconService;

const httpProvider = new HttpProvider(cfg.NODE_URL);
const iconService = new IconService(httpProvider);
const Test = () => {
    const inputCX = useRef(null);
    const inputScore = useRef(null);

    const wallet = "";
    useEffect(() => {
        wallet = IconWallet.loadPrivateKey(cfg.PRIVATE_KEY);
    }, []);

    const fileUploadEvent = async (e) => {
        console.log(e);
    };

    async function deployContract() {
        // const contractContent = await fetchContractContent(
        //     "https://siasky.net/AACS9pV2Ry3Or7WeOgCvGBGhlQAZ9yOQlBlGDYeWxrCIEA"
        // );
        const contractContent =
            "0x504b03041400080808000000210000000000000000000000000014000d004d4554412d494e462f4d414e49464553542e4d46555405000100000000feca0000f34dcccb4c4b2d2ed10d4b2d2acecccfb35230d433e0e5f24dccccd375ce492c2eb65270e6e5e2e50200504b07084b917f4f2a00000028000000504b0304140008080800000021000000000000000000000000000d0009004d4554412d494e462f41504953555405000100000000bd93414fc2301886bb0ebd7bf077ec07604cc6818484c444f40287a6b032a65b4bda8af15f301c3b7941042451440f7add4fb30c248a632831de967d5fdfefedfb7cbd09c1b88a5d4c6be4a8aec34e3044ec9212fe541435c689615a1627426477a2a08f1cebb578865bd8f0b06c1839c72e50496cc2b35ae46b6b4a21982cf57358d61ab321a3f91031adac8cd98f823b3546bc5592d5f6227f775d2d04f7929d137a7a5cd0357f835df8322f2967b65192dca1b61278901c5351273ccf990733dd6080eaea2b310cc97e9b91cab685dd0bb2be61802c2cf16d25a747ed103c7f761367b78da50d792a16b1a9b496155b8248b3d9e44c9dcb336eba2e5448c7883509c79225adce18e1f800b17ae5cc4c63ea0873f1672e91be7a69e27ea6570ee1e464915549917409d0bbe98efe176c3b848f1f0663907fee2fa61c135a025df08293afb000bcde32e96f18615fbd35a0757e964ec28b83b35d181e38d49187406dc00051ec2537aa6b892bafcadc649977504b070826b234d573010000c8040000504b03041400080808000000210000000000000000000000000007000900432e636c6173735554050001000000003bf56fd73e06060673061e4606466776064620e5c8cec0ccc8c0ef919a93931f9e5f9493a297955896c8c8c0669399975962c7c8a0aee10312d1cf49cc4bd70f2e29cacc4bb7c614d10ce361606360e7626061e060646071ce4f496564e00ace2f2d4a4e75cbcc496551646002ca8100d052905220c905e409333003210303bb96b6ce7606ce8d5025dc409289811500504b070884ac7b9d90000000b2000000504b03041400080808000000210000000000000000000000000007000900412e636c6173735554050001000000009d57897713c719ff8db5d2aee53538026116702a484224ad8439c21173c407d0383538b180d47652ba96d66641d69ad50a023d92b6a4f77d439a36a54de991b64082911370e995b4499bdef7ddbed7f7fa1ff4f5a5a5dfecae846d4936c4d26a76bef9aef97dc78c5ffcdfb3930036e21f0cac430463683aa81dd15ab35a6ea4b577e8a09eb645f868b153849f617e775fd7ba359d5ade48afe27cb4404fa8e79a4ccab68cdcc8665a18a2274d223df9b469e9ad1d998ca5e7f37c2543563c6aa7a5e5d207b67712f9c119a42daed651cd3ed0da698c74e76c7d44b7367b5cdb8db4cd79a62baf2eb28d3e6456674855d898213fb77267979da699d5b55c49f330c3bc69a244dc344357f5cd5400c7f505b61839c3dec6707bb492a19212dbc7e08bc6f6c908a33908018b19a4218d58d27a5ec2128685d58c8b58c6d0e83ad96512ed210af5cd0c0d39fd68091f86f5b3bbd095d50899d8cc68ca88607910afc10a198d98578f3adc4a4e696363967944cb4a58c97053059c22a2329a5cf63843bd6d1ed273fb0b962121312d315d3f44ac2226f2d6859861dd8df8ea054ac66aace19eae9511c2026efa0e1912eaf9db061941f76d1359f220eda5686f8d5e57e2c5aa93295ba6e325620b439d6633ac9cba05b7fe4a5aa692646cc35d0dd88a760679ea7e44100ec2c08ebe5e8645d5adcbd88e1df568c14e921dd1ed5e6bbb3eac15b2647d5315ebd7e9cfdde86e4017eea1bd9571ead4ecf40186f6e8e00cb4066bc05583ceb076bf7934a75bf9886659dab148de38ae47460b793b32ca4d448e1af681c87e2333755dc26e06d1d20f170c8b2a7f5174a05ae5c8b817f7f1f0f73134d7302f628f8c366c0e521e50a9494e5aeeedeb668847678dfbf486e823ac650cf0b8756190b0b729faf961ddda6999a30cbd1529753d19569d3ad8c97b423d19ecd2b259dda2628bc666e893b11f6fe43bd7643440e6499e2ef7038f490421172008b56c9e215c2d3707648ce04010c330a8cfecb74d372e437a2467e692c775cb9470888ad7c87738c5af67769a564736cbb07c8e0d73d5a3c871d44d8655bb753d1331c7744bb34d2b52ea2491619aacb3329131cdb28f454a9052db3b4c00a4cd51a2eb7b485ea915aa6e1979d841aa87029d64ddb97c6178d8481b7ace8e0c177219d27494629e2f0c91ee34d5c8aad9635e596dc7709c6b7f1365405eb76734f5da4546a9f916bc95e7cac324a9653232dee66a7a3bd5d81e6fa329caad2c05e981b9b2e7d52713f7e4041ee571782743d0c8f3c3c2c5824e1d0ad2bbf11e1efff7d2596fe69c0b429f9ed60d0ab584f7535f1ba4aef44186058395bb14f1616a57698de7c3ddd57bead422aaa2a16a33fa283ec633fbe394f7538bcceb47f7cd81558d36508becd45ab39169a5742ce8948806f5a95123efb426099f66581aadd9f03af959738a63fb18155f29aa9ea377dc5850073bb92f321ec767b9c2cf513d7af170f45d0bcae709174ac50eaf864a05b960a6b901be33d1d9163ff4a8854e45bb740792f124be14440c67282f67ea5c31c71606b8c35fc157b9c35fa39e38e42addc76dcaf83acfac18bec1d03a3de1a39e7c62e668e46cfec4249ca5aacd9a233b8e502533c4a25572a75a3a913be7f134cf9e67e8d89916909a46878ed9baf74b86c7196e9d0e438520df257116795bbaa766e37812cff2727f8eeacc396dd41a9da7fa8d5026992887236f5b64eb5b5467d101f7c0fb36dfde7788d0d7736f4ec2f71816f33b1ff9dfc18f4f178afb2dc3e627c79a2a97aaf27daf9a0879fe3c5ee0267e40a93f0ba38817f9ad4a1f31723d46dee60e7673077f841f37e025bccce03fca196769dec4fd53fc8c73ff9c50d273d4247f89663eff155d646db36c972b77aaed37f82d5ffe1d65c79674d6bb67fba36ee584f147dec9fe446ea58c919c6617f8d541e832333434a66c2d7d689736b6471be22d3798320b565adf6964756139a5af003a2be913e2b747faa72ac4ef8e342afc7875e67413269ebfd07b1de6d3bc69cafc269ad3fdb33c5fe8ac85b1887eff4a942df0d107581dbf08251e5a1a6a29e2960bb82d1eba3d14735ed57828196a2d62dd05ac8fab17b0319eb8803bcf81ff317e7ff134adf4342d893f83db1213e8a8c31574a9e7f1da09bcce47ef2d673d991eecf26406685f7e1aef542713934f4014ce40f0857a8b48a99397d1b2dbb741080beae46928c9b01057c3c2da043de3b83f75426067aefe3379d651f837fa9d0fa1a19dfd178d22f6b2ff6019915f8f7ecfce12da791d8df3c8b7f5ea041ee0beb596fc79106f70f9d82ef24722dacb450cb50512e79119c7c15325bfb2dc2f25e0901ae3cedbd8c9d2a2458bb4574518c791c71156c8dd2439eacc3c9687888583932c81d3262aa2eaf271b9374fe0111f1431114f9448ef70487125a026927cfeaec438de7712ab13a10f489721f4fb9440aa5f5053fdfe64aa3fa008a97e51f1bf807adf25e90cfc8a3f55c427ee3f57066914c157b040c4703b6bf6b5b3e5edec2a0e4312514734e7dbe27c3fe4bc77c1ef8cad223e425fe265b3f006a6f18a1078e27e129ff2a0bd42d036d2b8b026b4c94945b8960427e702dbb7410c8b49ca8d879361716d9ba4087ca857ea290a84fa63d350571589106d0b2af54ab022240977b181c74691cac19115595548a21c1839a134f0a91b94132265e0236e688af88c22d0cf389e2807e8f4ab09d029349502d4e4c6e8158894d52b5cb4f974a9335e4507c429b1d8eb7c792c80abf40f5c8db5ca80d660ac1acd2fe08b5e41b5525b1268bc85a2b99b7053cb39ad2e2be2cb6ed626d565e378aad429e8ceed09c7bd4e713317544b82099f23e8b48ad838bef994274777444f6e2b99e4d5b9a64970a00d9df3a04d10b4c9545ba0a9ce859c5016085a2aaf80221671a1e402dd606aa9ba7883aae86ee1a9da481d2c40a3dae473554d9455b5094dcca1b53c5ac4a5549b5f215d53945cc6a4a72449fef046b8dcb31bbae228d9edc97355499e619ea873bbf3440bd4d9b8fdeef8f35e5617f1ddd0f78bf8618f1a9f9cc04fea10df9598dce6f4d296d368e62db4cdaf2afe09fca20e4e23fd1745e1d7741398c0ef19aef5d42510249e6a8b79de5066bcc47b2b03fe4d878f843fa0d97361a9134eeac1cf61b8bf297c49ba883f3f8d4c699b7f774e1ef1ff504b07082d06acabf008000015140000504b03041400080808000000210000000000000000000000000007000900422e636c6173735554050001000000003bf56fd73e06060673067646064627760646460681acc4b244fd9cc4bc747dffa4acd4e41276066646062ecf206763433d901c90139c5f5a949cea969993cac6c8c0c4c0c200018c0c6c409289811500504b07084ee8a3325000000057000000504b01021400140008080800000021004b917f4f2a0000002800000014000d0000000000000000000000000000004d4554412d494e462f4d414e49464553542e4d46555405000100000000feca0000504b010214001400080808000000210026b234d573010000c80400000d00090000000000000000000000790000004d4554412d494e462f41504953555405000100000000504b010214001400080808000000210084ac7b9d90000000b2000000070009000000000000000000000030020000432e636c617373555405000100000000504b01021400140008080800000021002d06acabf0080000151400000700090000000000000000000000fe020000412e636c617373555405000100000000504b01021400140008080800000021004ee8a332500000005700000007000900000000000000000000002c0c0000422e636c617373555405000100000000504b050600000000050005004d010000ba0c00000000";
        // Estimate required step - create transaction without step limit
        // https://icondev.io/getting-started/how-to-write-a-smart-contract/how-to-estimate-required-step
        const httpProvider_debug = new HttpProvider(cfg.DEBUG_URL);
        const iconService_debug = new IconService(httpProvider_debug);
        const txObj = new IconService.IconBuilder.DeployTransactionBuilder()
            .nid(cfg.NID)
            .from(wallet.address)
            .to("cx489abf1ffc9d80e6fcc45e600d49255d3195dd41") //use the same address to update contract else, use cfg.SCORE_INSTALL_ADDRESS
            //.to(cfg.SCORE_INSTALL_ADDRESS)
            .version(IconConverter.toBigNumber(3))
            .timestamp(Date.now() * 1000)
            .contentType("application/java")
            .content(contractContent)
            .params({
                _name: "Alice",
                _symbol: "SMP",
            })
            .nonce(IconConverter.toBigNumber(1))
            .build();

        const estimatedSteps = IconConverter.toBigNumber(
            await iconService_debug.estimateStep(txObj).execute()
        );

        const margin = IconConverter.toBigNumber(10000);

        // Add step limit property to transaction
        txObj.stepLimit = IconService.IconConverter.toHex(
            estimatedSteps.plus(margin)
        );

        // Make signed transaction
        const signedTransaction = new SignedTransaction(txObj, wallet);
        const txHash = await iconService
            .sendTransaction(signedTransaction)
            .execute();
        console.log("txhash", txHash);
        setTimeout(async () => {
            const txObject = await iconService
                .getTransactionResult(txHash)
                .execute();
            console.log(txObject);
        }, 5000);

        return;
    }

    return (
        <>
            <Input ref={inputCX} placeholder="cx addy"></Input>
            <Input
                type="file"
                ref={inputScore}
                onChange={fileUploadEvent}
            ></Input>
            <Button onClick={deployContract}>Deploy</Button>
        </>
    );
};

export default Test;
